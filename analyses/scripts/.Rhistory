nsp = 2
nind = 7
rm(list=ls())
options(stringsAsFactors=FALSE)
library(dplyr)
setwd("~/Documents/git/freezingexperiment/analyses/scripts")
bb <- read.csv("..//output/birches_buddata.csv", header=TRUE)
nsp = 2
nind = 7
ntx = 2
rep = 22 # within each combination of treatments
(ntot = nsp*ntx*rep) # 616 rows
sp = gl(nsp, rep, length=ntot)
tx = gl(ntx, rep*nsp, length = ntot)
(d <- data.frame(sp, tx)) # critical coding error here!
spdiff = 1
inddiff = 0.5
txdiff = 3
spdiff = 1
txdiff = 3
spdiff.sd = 0.1
txdiff.sd = 0.1
mm <- model.matrix(~(tx+sp), data.frame(tx, sp))
coeff <- c(1, txdiff, spdiff)
risk <- rnorm(n = length(tx), mean = mm%*%coeff, sd = 1) # should be able to do sd = mm %*% sd.coeff as well, with a different sd for each parameter.
(fake <- data_frame(risk, tx, sp))
baseinter = 11 # baseline intercept across all individuals for DVR
spint <- baseinter + c(1:nind)-mean(1:nind) # different intercepts by species
fake <- vector()
for(i in 1:nind){ # loop over species, as these are the random effect modeled
# Give species different difference values, drawn from normal. Could make dataframe of diffs and diff.sds, and use apply..
coeff <- c(spint[1],
rnorm(1, spdiff, spdiff.sd),
rnorm(1, txdiff, txdiff.sd)
)
risk <- rnorm(n = length(tx), mean = mm%*%coeff, sd = 0.1)
fakex <- data.frame(risk, ind=1, sp, tx)
fake<-rbind(fake, fakex)
}
summary(lm(risk ~ tx+sp, data = fake)) # sanity check
fake$tx <- as.numeric(fake$tx)
fake$tx[fake$tx==1] <- 0
fake$tx[fake$tx==2] <- 1
summary(lm(risk ~ tx+sp+ind, data = fake)) # double sanity check
mean(fake$risk)
sd(fake$risk)
rm(list=ls())
options(stringsAsFactors=FALSE)
library(dplyr)
setwd("~/Documents/git/projects/treegarden/budexperiments/analyses")
nsite = 2
nsp = 28
nwarm = 2
nphoto = 2
nchill = 3
rep = 10 # within each combination of treatments.
(ntot = nsite*nwarm*nphoto*nchill*rep) # 792 rows; 22k rows across species
site = gl(nsite, rep, length = ntot)
warm = gl(nwarm, rep*nsite, length = ntot)
photo = gl(nphoto, rep*nsite*nwarm, length = ntot)
chill = gl(nchill, rep*nsite*nwarm*nphoto, length = ntot)
chill1 = ifelse(chill == 2, 1, 0)
chill2 = ifelse(chill == 3, 1, 0)
treatcombo = paste(warm, photo, chill1, chill2, sep = "_")
(d <- data.frame(site, warm, photo, chill1, chill2, treatcombo)) # critical coding error here!
sitediff = 2
warmdiff = -20 # days earlier from 1 to 2
photodiff = -14
chill1diff = -20
chill2diff = -19
sitewarm = 0
sitephoto = 0
sitechill1 = -1 # similar to stan results
sitechill2 = -2
warmphoto = 3.5 # positive 3.5. So at the warm level, the effect of longer days is muted by 3.5 days.
warmchill1 = 11 # both positive ~ 10.
warmchill2 = 9
photochill1 = 0.1 # from stan results
photochill2 = 1
sitediff.sd = 1.5
warmdiff.sd = 1
photodiff.sd = 1
chill1diff.sd = 1.5
chill2diff.sd = 2
sitewarm.sd = 1
sitephoto.sd = 1
sitechill1.sd = 2
sitechill2.sd = 2
warmphoto.sd = 1
warmchill1.sd = 1.5
warmchill2.sd = 1.5
photochill1.sd = 1
photochill2.sd = 1
mm <- model.matrix(~(site+warm+photo+chill1+chill2)^2, data.frame(site, warm, photo))
mm <- mm[,-grep("chill1:chill2", colnames(mm))]
colnames(mm)
coeff <- c(1, sitediff, warmdiff, photodiff, chill1diff, chill2diff,
sitewarm, sitephoto, sitechill1, sitechill2,
warmphoto, warmchill1, warmchill2,
photochill1, photochill2
)
bb <- rnorm(n = length(warm), mean = mm %*% coeff, sd = 1) # should be able to do sd = mm %*% sd.coeff as well, with a different sd for each parameter.
(fake <- data_frame(bb, site, warm, photo, chill1, chill2))
summary(lm(bb ~ (site+warm+photo+chill1+chill2)^2, data = fake)) # sanity check
baseinter = 35 # baseline intercept across all species
spint <- baseinter + c(1:nsp)-mean(1:nsp) # different intercepts by species
fake <- vector()
for(i in 1:nsp){ # loop over species, as these are the random effect modeled
# Give species different difference values, drawn from normal. Could make dataframe of diffs and diff.sds, and use apply..
coeff <- c(spint[i],
rnorm(1, sitediff, sitediff.sd),
rnorm(1, warmdiff, warmdiff.sd),
rnorm(1, photodiff, photodiff.sd),
rnorm(1, chill1diff, chill1diff.sd),
rnorm(1, chill2diff, chill2diff.sd),
rnorm(1, sitewarm, sitewarm.sd),
rnorm(1, sitephoto, sitephoto.sd),
rnorm(1, sitechill1, sitechill1.sd),
rnorm(1, sitechill2, sitechill2.sd),
rnorm(1, warmphoto, warmphoto.sd),
rnorm(1, warmchill1, warmchill1.sd),
rnorm(1, warmchill2, warmchill2.sd),
rnorm(1, photochill1, photochill1.sd),
rnorm(1, photochill2, photochill2.sd)
)
bb <- rnorm(n = length(warm), mean = mm %*% coeff, sd = 0.1)
fakex <- data.frame(bb, sp = i, site, warm, photo, chill1, chill2)
fake <- rbind(fake, fakex)
}
summary(lm(bb ~ (site+warm+photo+chill1+chill2)^2, data = fake)) # sanity check
rm(list=ls())
options(stringsAsFactors=FALSE)
# Fake data for buburst stan work #
library(dplyr)
setwd("~/Documents/git/freezingexperiment/analyses/scripts")
bb <- read.csv("..//output/birches_buddata.csv", header=TRUE)
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# Set up: 2 species, two levels for treatment, 7 individuals per species per treatment, 22 buds per individual
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
nsp = 2
nind = 7
ntx = 2
rep = 22 # within each combination of treatments
(ntot = nsp*ntx*rep) # 616 rows
# Build up the data frame
sp = gl(nsp, rep, length=ntot)
tx = gl(ntx, rep*nsp, length = ntot)
(d <- data.frame(sp, tx)) # critical coding error here!
spdiff = 1
txdiff = 3
spdiff.sd = 0.1
txdiff.sd = 0.1
mm <- model.matrix(~(tx+sp)^2, data.frame(tx, sp))
mm <- mm[,-grep("sp", colnames(mm))]
mm <- model.matrix(~(tx+sp), data.frame(tx, sp))
colnames(mm)
coeff <- c(1, txdiff, spdiff)
risk <- rnorm(n = length(tx), mean = mm%*%coeff, sd = 1) # should be able to do sd = mm %*% sd.coeff as well, with a different sd for each parameter.
(fake <- data_frame(risk, tx, sp))
baseinter = 11 # baseline intercept across all individuals for DVR
spint <- baseinter + c(1:nind)-mean(1:nind) # different intercepts by species
spint
fake <- vector()
for(i in 1:nind){ # loop over species, as these are the random effect modeled
# Give species different difference values, drawn from normal. Could make dataframe of diffs and diff.sds, and use apply..
coeff <- c(spint[1],
rnorm(1, spdiff, spdiff.sd),
rnorm(1, txdiff, txdiff.sd)
)
risk <- rnorm(n = length(tx), mean = mm%*%coeff, sd = 0.1)
fakex <- data.frame(risk, ind=i, sp, tx)
fake<-rbind(fake, fakex)
}
summary(lm(risk ~ tx+sp, data = fake)) # sanity check
for(i in 1:nind){ # loop over species, as these are the random effect modeled
# Give species different difference values, drawn from normal. Could make dataframe of diffs and diff.sds, and use apply..
coeff <- c(spint[1],
rnorm(1, spdiff, spdiff.sd),
rnorm(1, txdiff, txdiff.sd)
)
risk <- rnorm(n = length(tx), mean = 11, sd = 0.1)
fakex <- data.frame(risk, ind=i, sp, tx)
fake<-rbind(fake, fakex)
}
summary(lm(risk ~ tx+sp, data = fake)) # sanity check
mm %*% coeff
fakex <- data.frame(risk, ind=i, sp, tx)
View(fakex)
View(fake)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
setwd("~/Documents/git/freezingexperiment/analyses/")
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(as.factor(bb$bud))
View(bb)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind", "sp")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
sp = ospr.stan$sp
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
n_sp = length(unique(ospr.stan$sp))
datalist.td <- list(dvr=dvr,tx=tx,sp=sp, ind=ind,N=N,n_ind=n_ind, n_sp=n_sp) # removed sp=sp and n_sp=s_sp for one species
View(ospr.stan)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind", "sp")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
sp = ospr.stan$sp
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
n_sp = length(unique(ospr.stan$sp))
datalist.td <- list(dvr=dvr,tx=tx,sp=sp, ind=ind,N=N,n_ind=n_ind, n_sp=n_sp) # removed sp=sp and n_sp=s_sp for one species
mod1<-stan_glmer(dvr~tx+sp+(1|ind), data=ospr.stan)
mod1
pred_1 <- posterior_predict(mod1)  # point predictions
betas <- as.matrix(osp.td4, pars = c("mu_b_tx", "mu_b_sp"))
plot(mod1, pars="beta")
plot(mod1)
rstanarm::plot(mod1, pars="beta")
install.packages(c("abind", "acepack", "ade4", "ape", "assertthat", "bayesplot", "BH", "bibtex", "boot", "broom", "ca", "car", "chillR", "chron", "cluster", "coda", "codetools", "colorspace", "colourpicker", "covr", "cowplot", "crayon", "curl", "data.table", "date", "DBI", "diffobj", "digest", "doParallel", "dplyr", "dtplyr", "dygraphs", "evaluate", "fastmatch", "fields", "foreign", "formatR", "Formula", "gamm4", "gapminder", "gdata", "gdtools", "geosphere", "gridExtra", "gutenbergr", "Hmisc", "HSAUR2", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "irlba", "janeaustenr", "jsonlite", "knitcitations", "knitr", "Lahman", "lattice", "lazyeval", "lme4", "loo", "lubridate", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "memoise", "mgcv", "mice", "mnormt", "multcomp", "mvtnorm", "ncdf4", "nlme", "NLP", "numDeriv", "nycflights13", "openssl", "optextras", "packrat", "pander", "pbkrtest", "PKI", "plotrix", "psych", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "RefManageR", "rex", "rgdal", "rgeos", "rJava", "rlang", "rmarkdown", "rms", "RMySQL", "rpart", "RPostgreSQL", "rsconnect", "RSQLite", "rstan", "rstanarm", "rstudioapi", "Rvmmin", "sandwich", "scales", "selectr", "shape", "shiny", "shinyjs", "shinystan", "shinythemes", "slam", "sp", "spam", "SparseM", "StanHeaders", "stringi", "stringr", "survival", "svglite", "tables", "TH.data", "threejs", "tibble", "tidyr", "tidytext", "tm", "tokenizers", "topicmodels", "ucminf", "urltools", "vegan", "withr", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("abind", "acepack", "ade4", "ape", "assertthat", "bayesplot", "BH", "bibtex", "boot", "broom", "ca", "car", "chillR", "chron", "cluster", "coda", "codetools", "colorspace", "colourpicker", "covr", "cowplot", "crayon", "curl", "data.table", "date", "DBI", "diffobj", "digest", "doParallel", "dplyr", "dtplyr", "dygraphs", "evaluate", "fastmatch", "fields", "foreign", "formatR", "Formula", "gamm4", "gapminder", "gdata", "gdtools", "geosphere", "gridExtra", "gutenbergr", "Hmisc", "HSAUR2", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "irlba", "janeaustenr", "jsonlite", "knitcitations", "knitr", "Lahman", "lattice", "lazyeval", "lme4", "loo", "lubridate", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "memoise", "mgcv", "mice", "mnormt", "multcomp", "mvtnorm", "ncdf4", "nlme", "NLP", "numDeriv", "nycflights13", "openssl", "optextras", "packrat", "pander", "pbkrtest", "PKI", "plotrix", "psych", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "RefManageR", "rex", "rgdal", "rgeos", "rJava", "rlang", "rmarkdown", "rms", "RMySQL", "rpart", "RPostgreSQL", "rsconnect", "RSQLite", "rstan", "rstanarm", "rstudioapi", "Rvmmin", "sandwich", "scales", "selectr", "shape", "shiny", "shinyjs", "shinystan", "shinythemes", "slam", "sp", "spam", "SparseM", "StanHeaders", "stringi", "stringr", "survival", "svglite", "tables", "TH.data", "threejs", "tibble", "tidyr", "tidytext", "tm", "tokenizers", "topicmodels", "ucminf", "urltools", "vegan", "withr", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("abind", "acepack", "ade4", "ape", "assertthat", "bayesplot", "BH", "bibtex", "boot", "broom", "ca", "car", "chillR", "chron", "cluster", "coda", "codetools", "colorspace", "colourpicker", "covr", "cowplot", "crayon", "curl", "data.table", "date", "DBI", "diffobj", "digest", "doParallel", "dplyr", "dtplyr", "dygraphs", "evaluate", "fastmatch", "fields", "foreign", "formatR", "Formula", "gamm4", "gapminder", "gdata", "gdtools", "geosphere", "gridExtra", "gutenbergr", "Hmisc", "HSAUR2", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "irlba", "janeaustenr", "jsonlite", "knitcitations", "knitr", "Lahman", "lattice", "lazyeval", "lme4", "loo", "lubridate", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "memoise", "mgcv", "mice", "mnormt", "multcomp", "mvtnorm", "ncdf4", "nlme", "NLP", "numDeriv", "nycflights13", "openssl", "optextras", "packrat", "pander", "pbkrtest", "PKI", "plotrix", "psych", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "RefManageR", "rex", "rgdal", "rgeos", "rJava", "rlang", "rmarkdown", "rms", "RMySQL", "rpart", "RPostgreSQL", "rsconnect", "RSQLite", "rstan", "rstanarm", "rstudioapi", "Rvmmin", "sandwich", "scales", "selectr", "shape", "shiny", "shinyjs", "shinystan", "shinythemes", "slam", "sp", "spam", "SparseM", "StanHeaders", "stringi", "stringr", "survival", "svglite", "tables", "TH.data", "threejs", "tibble", "tidyr", "tidytext", "tm", "tokenizers", "topicmodels", "ucminf", "urltools", "vegan", "withr", "XML", "xml2", "xts", "yaml", "zoo"))
plot(mod1)
library(rstan)
library(shinystan)
library(bayesplot)
library(rstanarm)
plot(mod1)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(lme4)
library(arm)
library(gridExtra)
library( data.table )
library(rstan)
library(rstanarm)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d <-read.csv("input/Buds_clean.csv", header=TRUE, check.names=FALSE)
################ Cleaning data ##################################
# remove individuals that were frosted twice
error.inds<-d%>%dplyr::select(NEW,Freeze)
error.inds<-error.inds[!duplicated(error.inds),]
#error.inds$Freeze<-ifelse(error.inds$Freeze=="", NA, error.inds$Freeze)
#error.inds<-na.omit(error.inds)
error.inds<-as.data.frame(table(error.inds$NEW))
error.inds<-filter(error.inds, Freq!=3)
keep<-unique(error.inds$Var1)
## Clean dataframe for analysis
dx<-gather(d, key=doy, value=bbch, -NEW, -TX, -Freeze, -Bud)
dx<-filter(dx, NEW %in% keep)
dx$day<-substr(dx$doy, 1, 2)
dx$month<-substr(dx$doy, 4, 5)
dx$year<-substr(dx$doy, 7,10)
x<-paste(dx$year, dx$day, dx$month)
dx$date<-as.Date(strptime(x, format="%Y %d %m"))
dx$doy<-yday(dx$date)
### DOY should now be adjusted for start of experiment rather than actual calendar doy
# Start of Experiment was: 24 March 2017
start<-yday("2017/03/24")
dx$doy.adjusted<-dx$doy-start
dx$bud <- ave(dx$Bud, dx$NEW, dx$date, FUN = seq_along)
# Quick check...
dvr<-dx[!is.na(dx$bbch),]
done<-c("DONE!", "DONE", "DONE!!", "missed","(missed)", "")
dvr<-dvr[!dvr$bbch%in%done,]
dead<-c("stem snapped", "x", "dead")
dvr$bbch<-ifelse(dvr$bbch%in%dead, 0, dvr$bbch)
dvr$bud<-as.numeric(dvr$bud)
dvr$ID<-paste(dvr$NEW, dvr$bud, sep="_")
dvr<-dvr%>%dplyr::select(ID, doy.adjusted, bbch)
last<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), max)
last<-last%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
last$leaf<-NA
for(i in c(1:nrow(last))) {
for(j in c(1:nrow(dvr)))
if(last$ID[i]==dvr$ID[j] & last$doy.adjusted[i]==dvr$doy.adjusted[j])
last$leaf[i]<-dvr$bbch[j]
}
first<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), min)
first<-first%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
first$bb<-NA
for(i in c(1:nrow(first))) {
for(j in c(1:nrow(dvr)))
if(first$ID[i]==dvr$ID[j] & first$doy.adjusted[i]==dvr$doy.adjusted[j])
first$bb[i]<-dvr$bbch[j]
}
############## Determine Duration of Vegetative Risk #################
##### Need to clean data a lot - remove early incorrectly entered data
## and edit errors from when I was away
## then determine dead buds and if any reached budburst and then died
## If so to above, need to recalculate percent budburst
first<-first%>%rename(budburst=doy.adjusted)%>%rename(bbch.first=bb)
last<-last%>%rename(leafout=doy.adjusted)%>%rename(bbch.last=leaf)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
###### Now integrate FS ###########
frz<-subset(dx,TX=="B")
frz<-dplyr::select(frz, NEW, Freeze, bud)
frz$day<-substr(frz$Freeze, 1, 2)
frz$month<-substr(frz$Freeze, 4, 5)
frz$year<-substr(frz$Freeze, 7,10)
x<-paste(frz$year, frz$day, frz$month)
frz$date<-as.Date(strptime(x, format="%Y %d %m"))
frz$frz<-yday(frz$date)
frz<-dplyr::select(frz, NEW, frz)
frz<-na.omit(frz)
frz<-frz[!duplicated(frz),]
risk$frz<-NA
for(i in c(1:nrow(risk))) {
for(j in c(1:nrow(frz)))
if(risk$individ[i]==frz$NEW[j])
risk$frz[i]<-frz$frz[j]
}
risk$frz<- risk$frz-start
risk$tx<-ifelse(is.na(risk$frz), "A", "B")
risk$dvr<-ifelse(risk$bbch.last==15, (risk$leafout-risk$budburst), NA)
risk$frost<-ifelse(risk$bbch.first<=risk$frz, 1, 0)
risk$frost<-ifelse(risk$tx=="A", 0, risk$frost)
risk$bud<-as.numeric(risk$bud)
mod1<-lmer(dvr~tx+(1|species), data=risk)
display(mod1)
betula<-c("BETPOP", "BETPAP")
birch<-subset(risk, risk$species%in%betula)
birch<-read.csv("output/birches_buddata.csv", header=TRUE)
mod2<-glm(dvr~bud+species+frost, data=birch)
display(mod2)
mod3<-glm(dvr~species+bud*tx, data=birch)
display(mod3)
mod4<-lmer(dvr~tx + (1|species), data=birch)
display(mod4)
birch$bud<-as.numeric(birch$bud)
birch<-birch[!is.na(birch$dvr),]
birch<-birch[birch$dvr>0,]
bpap<-ggplot(birch, aes(x=bud, y=dvr, color=as.factor(tx))) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
dvr_bb<-risk[!is.na(risk$dvr),]
dvr_bb<-risk[risk$dvr>0,]
#write.csv(risk, file="~/Documents/git/freezingexperiment/analyses/output/budsdvr_all.csv", row.names = FALSE)
ggplot(dvr_bb, aes(x=bud, y=dvr, color=tx)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
mod<-lmer(dvr~tx+species+(1|individ), data=risk)
display(mod)
mod1<-lmer(dvr~as.factor(frost)+species+(1|individ), data=birch)
display(mod1)
birch$bud
birch$z_bud<-(birch$bud - mean(birch$bud))/sd(birch$bud)
lmod1<-lmer(dvr~tx+bud+(1|species), data=birch)
display(lmod1)
simp<-lm(dvr~frost+bud+species+frost:bud, data=birch)
display(simp)
birch.mean<-birch[!is.na(birch$dvr),]
birch.mean$avg.rate<-ave(birch.mean$dvr, birch.mean$individ)
hist(birch.mean$avg.rate)
M1<-lmer(avg.rate~tx+(1|species), data=birch.mean)
display(M1)
qplot(species, dvr, data = birch,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Mean DVR")
###### Re-evaluated % budburst #######
burst<-risk[!is.na(risk$dvr),]
burst<-distinct(burst, ID,individ)
burst<-as.data.frame(table(burst$individ))
burst<-burst%>%rename(individ=Var1)%>%rename(burst=Freq)
burst$individ<-as.character(burst$individ)
total<-risk
total<-distinct(total, ID,individ)
total<-as.data.frame(table(total$individ))
total<-total%>%rename(individ=Var1)%>%rename(total=Freq)
total$individ<-as.character(total$individ)
percent<-full_join(total, burst)
percent$perc.bb<-(percent$burst/percent$total)*100
percent$species<-substr(percent$individ, 1,6)
percent$tx<-NA
percent$tx<-as.character(percent$tx)
for(i in c(1:nrow(percent))){
for(j in c(1:nrow(risk)))
if(percent$individ[i]==risk$individ[j])
percent$tx[i]<-risk$tx[j]
}
percent$species<-substr(percent$individ, 1, 6)
View(percent)
p<-percent
p<-dplyr::select(p,species, individ, tx)
p<-p[!duplicated(p),]
pt <- data.table(p)
pt<-pt[,ind := 1:.N , by = c("species" , "tx") ]
percent<-dplyr::select(percent, species, individ, tx, perc.bb)
px<-left_join(percent, pt)
ggplot(px, aes(x=ind, y=perc.bb, color=tx)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
qplot(species, perc.bb, data = px,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Percent Budburst")
sp<-c("BETPAP", "BETPOP")
pb<-filter(px, species %in% sp)
View(pb)
write.csv(pb, file="~/Documents/git/freezingexperiment/analyses/output/percentBB_betula.csv", row.names = FALSE)
rm(list=ls())
options(stringsAsFactors=FALSE)
# Fake data for buburst stan work #
library(dplyr)
setwd("~/Documents/git/freezingexperiment/analyses/scripts")
bb <- read.csv("..//output/percentBB_betula.csv", header=TRUE) ## to check data
nsp = 2
ntx = 2
rep = 7 # within each combination of treatments
(ntot = nsp*ntx*rep) # 88 rows
# Build up the data frame
sp = gl(nsp, rep, length=ntot)
tx = gl(ntx, rep*nsp, length = ntot)
(d <- data.frame(sp, tx))
mean(bb$perc.bb)
sd(bb$perc.bb)
mean(bb$perc.bb[bb$tx==1])
View(bb)
bb$tx<-ifelse(bb$tx=="A", 0, 1)
mean(bb$perc.bb[bb$tx==1])
mean(bb$perc.bb[bb$tx==0])
bb$perc<-bb$perc.bb/100
txdiff = .04
######## SD for each treatment
txdiff.sd = 0.05
mm <- model.matrix(~(tx), data.frame(tx))
baseinter = 0.70 # baseline intercept across all individuals for DVR
spint <- baseinter + c(1:nsp)-mean(1:nsp) # different intercepts by individual
fake <- vector()
f
for(i in 1:nsp){ # loop over individual (random effect of model)
# Give individuals different difference values, drawn from normal
coeff <- c(spint[i],
rnorm(1, txdiff, txdiff.sd)
)
risk <- rnorm(n = length(tx), mean = mm %*% coeff, sd = 0.2)
fakex <- data.frame(risk, ind=i, sp, tx)
fake<-rbind(fake, fakex)
}
summary(lm(risk ~ tx, data = fake)) # sanity check
rm(list=ls())
options(stringsAsFactors=FALSE)
# Fake data for buburst stan work #
library(dplyr)
setwd("~/Documents/git/freezingexperiment/analyses/scripts")
bb <- read.csv("..//output/birches_buddata.csv", header=TRUE) ## to check data
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# Set up: 2 species, two levels for treatment, 7 individuals per species per treatment, 22 buds per individual
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
nsp = 2
nind = 7 # random effect
ntx = 2
rep = 22 # within each combination of treatments
(ntot = nsp*ntx*rep) # 88 rows
# Build up the data frame
sp = gl(nsp, rep, length=ntot)
tx = gl(ntx, rep*nsp, length = ntot)
(d <- data.frame(sp, tx))
###### Set up differences for each level
spdiff = 0.5
txdiff = 1.5
######## SD for each treatment
spdiff.sd = 0.5
txdiff.sd = 0.5
mm <- model.matrix(~(sp+tx), data.frame(sp, tx)) ### ORDER HERE REALLY MATTERS!!! MAKE SURE IT LINES UP WITH "COEFF"
## Coding check below - keep for future tweaks to code/data
#coeff <- c(1, spdiff, txdiff)
#risk <- rnorm(n = length(tx), mean = mm%*%coeff, sd = 1) # should be able to do sd = mm %*% sd.coeff as well, with a different sd for each parameter.
#(fake <- data_frame(risk, tx, sp))
##### Again, now with individuals.
baseinter = 11 # baseline intercept across all individuals for DVR
spint <- baseinter + c(1:nind)-mean(1:nind) # different intercepts by individual
fake <- vector()
for(i in 1:nind){ # loop over individual (random effect of model)
# Give individuals different difference values, drawn from normal
coeff <- c(spint[i],
rnorm(1, spdiff, spdiff.sd),
rnorm(1, txdiff, txdiff.sd)
)
risk <- rnorm(n = length(tx), mean = mm %*% coeff, sd = 0.2)
fakex <- data.frame(risk, ind=i, sp, tx)
fake<-rbind(fake, fakex)
}
summary(lm(risk ~ tx+sp, data = fake))
fake$tx <- as.numeric(fake$tx)
fake$tx[fake$tx==1] <- 0
fake$tx[fake$tx==2] <- 1
summary(lm(risk ~ tx+sp, data = fake)) # double check
mod1<-stan_glmer(risk~tx+sp+(1|ind), data=fake)
View(fake)
plot(mod1, pars="beta")
install.packages(c("bayesplot", "dplyr", "rstan", "rstanarm"))
install.packages(c("bayesplot", "dplyr", "rstan", "rstanarm"))
install.packages("bayesplot")
install.packages("bayesplot")
