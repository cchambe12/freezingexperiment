daters <- plz[, list(daters = seq(stday, enday))]
stday
enday
st[i]<-stday
stday[i]<-stday
plz<- dx%>% filter(year==1997)
plz<-na.omit(plz)
peps<-unique(plz$PEP_ID)
please<-list()
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
for(i in stday){
daters <- seq(stday, enday, by="days")
df<- data.frame(Lat = plz$lat,Long = plz$long, Date = daters,
Tmin = plz$Tmin, id=plz$PEP_ID, phase=plz$BBCH, count=plz$count, Year=plz$year)
please<-rbind(please, data.frame(df))
}
for(i in stday){
daters[i] <- seq(stday, enday, by="days")
df<- data.frame(Lat = plz$lat,Long = plz$long, Date = daters,
Tmin = plz$Tmin, id=plz$PEP_ID, phase=plz$BBCH, count=plz$count, Year=plz$year)
please<-rbind(please, data.frame(df))
}
for(i in c(1:length(stday))){
daters[i] <- seq(stday, enday, by="days")
df<- data.frame(Lat = plz$lat,Long = plz$long, Date = daters,
Tmin = plz$Tmin, id=plz$PEP_ID, phase=plz$BBCH, count=plz$count, Year=plz$year)
please<-rbind(please, data.frame(df))
}
for(i in c(1:length(stday))){
daters[i] <- seq(stday[i], enday[i], by="days")
df<- data.frame(Lat = plz$lat,Long = plz$long, Date = daters,
Tmin = plz$Tmin, id=plz$PEP_ID, phase=plz$BBCH, count=plz$count, Year=plz$year)
please<-rbind(please, data.frame(df))
}
for(i in c(1:length(stday))){
daters <- seq(stday[i], enday[i], by="days")
df<- data.frame(Lat = plz$lat,Long = plz$long, Date = daters,
Tmin = plz$Tmin, id=plz$PEP_ID, phase=plz$BBCH, count=plz$count, Year=plz$year)
please<-rbind(please, data.frame(df))
}
daters
df<- data.frame(Lat = plz$lat,Long = plz$long, Date = daters,
Tmin = plz$Tmin, id=plz$PEP_ID, phase=plz$BBCH, count=plz$count, Year=plz$year)
df<- data.frame(Date = daters)
please<-rbind(please, data.frame(df))
View(please)
please<-rbind(plz, data.frame(df))
df<- data.frame(Lat = plz$lat,Long = plz$long, Date = daters,
Tmin = plz$Tmin, id=plz$PEP_ID, phase=plz$BBCH, count=plz$count, Year=plz$year)
please<-full_join(plz, data.frame(df))
df<- data.frame(Date = daters)
please<-left_join(plz, data.frame(df))
df<- data.frame(date = daters)
df<- data.frame(date = daters)
please<-left_join(plz, data.frame(df))
View(plz)
please<-full_join(plz, data.frame(df))
climate<-clim%>%filter(year==1997)
please<-full_join(climate, data.frame(df))
View(please)
please<-left_join(data.frame(df), climate)
View(please)
plz<- dx%>% filter(year==1997)
plz<-na.omit(plz)
peps<-unique(plz$PEP_ID)
please<-list()
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
for(i in c(1:length(stday))){
daters <- seq(stday[i], enday[i], by="days")
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
for(i in c(1:length(stday))){
daters <- seq(stday[i], enday[i])
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
View(please)
climate<-clim%>%filter(year==1997)
plz<- dx%>% filter(year==1997)
plz<-na.omit(plz)
peps<-unique(plz$PEP_ID)
please<-list()
for(i in c(1:length(peps))) {
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
}
for(i in c(1:length(stday))){
daters <- seq(stday[i], enday[i])
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
daters <- seq(stday, enday, by="days")
daters <- seq(unique(stday), unique(enday), by="days")
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
for(i in c(1:length(peps))) {
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
}
fingers.crossed<-apply(plz,1,function(x) { seq.Date( as.Date(x[stdat]), as.Date(x[enday]), by='days') } )
fingers.crossed<-apply(plz,1,function(x) { seq.Date( as.Date(x[stday]), as.Date(x[enday]), by='days') } )
getDfForDates <- function(row) {
dseq <- seq.Date( as.Date(row[stday]), as.Date(row[enday]), by='days')
data.frame( ID=row[plz$PEP_ID], datelist=dseq, NoDays=1)
}
View(getDfForDates)
rbindlist(
apply(plz,1,function(x) {
getDfForDates(x)
} )
)
setDT(plz)
plz[, list(datelist=seq.Date( stday, enday, by='days'), NoDays=1), by=PEP_ID]
plz[, list(datelist=seq.Date( stday, enday, by='days'), NoDays=1)]
apply(climate,1,function(x) { seq.Date( as.Date(x['stday']), as.Date(x['enday']), by='days') } )
daters <- seq_along(stday, enday, by="days")
for(i in 1:length(stday)){
daters <- seq(stday[i], enday[i], by="days")
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
for(i in 1:length(stday)){
daters <- seq(as.Date(stday[i]), as.Date(enday[i]), by="days")
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
for(i in 1:length(stday)){
daters <- seq(as.Date(stday[i]), as.Date(enday[i]))
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
for(i in 1:length(stday)){
daters <- seq(as.Date(stday[i]), as.Date(enday[i]), by=1)
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
for(i in 1:length(stday)){
daters <- seq(as.Date(stday[i]), as.Date(enday[i]), by="day")
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
myFun <- function(stday, enday) {
if(stday > enday)
stop("`mi` is > than `ma`")
seq(from=stday, to=enday, by="days")
}
myFun
dffff<-myFun(plz)
myFun <- function(stday, enday) {
if(stday < enday)
stop("`mi` is > than `ma`")
seq(from=stday, to=enday, by="days")
}
dffff<-myFun(plz)
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
myFun <- function(stday, enday) {
if(stday < enday)
stop("`mi` is > than `ma`")
seq(from=stday, to=enday, by="days")
}
dffff<-myFun(plz)
daters <- seq(stday,enday, by="day")
daters <- apply{function(x)seq(x[stday],x[enday], by="day")}
daters <- apply(function(x)seq(x[stday],x[enday], by="day"))
for(i in 1:length(stday)){
daters <- list[,seq(as.Date(stday[i]), as.Date(enday[i]), by="day")]
df<- data.frame(date = daters)
please<-left_join(data.frame(df), climate)
}
daters <- list[,seq(as.Date(stday), as.Date(enday[i]), by="day")]
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(arm)
library(stringr)
setwd("~/Documents/git/regionalrisk/analyses/output")
bb<-read.csv("bbch_region_betula.csv", header=TRUE)
clim<-read.csv("climate_betula.csv", header=TRUE)
clim$date<-as.Date(paste(clim$year, clim$month, clim$day, sep="-"))
bb<-bb%>%dplyr::rename("lat" = LAT)%>%dplyr::rename("long"=LON)
x<-paste(bb$YEAR, bb$DAY)
bb$date<-as.Date(strptime(x, format="%Y %j"))
bb$year<-as.numeric(substr(bb$date, 0,4))
bb$month<-as.numeric(substr(bb$date, 6, 7))
bb$day<-as.numeric(substr(bb$date, 9,10))
bb<-bb%>%dplyr::select(-National_ID, -YEAR)
bb$lat<-round(bb$lat, digits=2)
bb$long<-round(bb$long, digits=2)
clim$lat<-round(clim$lat, digits=2)
clim$long<-round(clim$long, digits=2)
d<-full_join(clim, bb)
d<-filter(d, year>=1950)
how_many<-d[which(is.na(d$Tmin)),]
d<-d[!(is.na(d$Tmin) & is.na(d$PEP_ID)),]
df<-d%>%dplyr::select(year, PEP_ID, BBCH)
df$BBCH<-ifelse(df$BBCH>=7, df$BBCH, NA)
df<-df%>%group_by(year,PEP_ID)%>%arrange(year)
df<-na.omit(df)
df <- within(df, { count <- ave(BBCH,PEP_ID, year, FUN=function(x) length(unique(x)))})
df$count<-ifelse(df$count>=2,df$count, NA)
xx<-na.omit(df)
unique(xx$year) ## 1997-2015
peps<-unique(xx$PEP_ID)
years<-c(1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015)
frz<-d%>%filter(year%in%years)%>%filter(PEP_ID %in% peps)
many<-frz[which(is.na(frz$Tmin)),]
frz<-frz[!(is.na(frz$Tmin)),]
frz$lat.long<-paste(frz$lat,frz$long, sep=",")
##### Now find climate data ######
d$lat.long<-paste(d$lat, d$long, sep=",")
lats<-unique(frz$lat.long)
dx<-filter(d, lat.long%in%lats)
dx<-dx[!(is.na(dx$Tmin)),]
dx$grow<-ifelse(is.na(dx$BBCH), NA, TRUE)
dx$count <- ave(
dx$grow, dx$PEP_ID, dx$year,
FUN=function(x) cumsum(c(1, head(x, -1)))
)
dx$frz<- ifelse((dx$Tmin<=-2.2), 1, 0)
climate<-clim%>%filter(year==1997)
plz<- dx%>% filter(year==1997)
plz<-na.omit(plz)
peps<-unique(plz$PEP_ID)
for(i in c(1:length(peps))) {
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
}
stday
enday
daters <- list[,seq(as.Date(stday), as.Date(enday[i]), by="day")]
for(i in c(1:length(peps))) {
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
daters <- list[,seq(as.Date(stday), as.Date(enday[i]), by="day")]
}
for(i in c(1:length(peps))) {
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
daters <- seq(as.Date(stday), as.Date(enday), by="day")
}
daters <- seq(stday, enday, by="day")
for(i in c(1:length(peps))) {
stday<- unique(plz$date[which(plz$count==1)])
enday<- unique(plz$date[which(plz$count==2)])
daters <- seq(stday, enday, by="day")
}
daters
for(i in c(1:length(peps))) {
stday[i]<- plz$date[which(plz$count==1)]
enday[i]<- plz$date[which(plz$count==2)]
daters <- seq(stday, enday, by="day")
}
stday<- plz$date[which(plz$count==1)]
stday
for(i in c(1:length(peps))) {
stday<- plz$date[which(plz$count==1)]
enday<- plz$date[which(plz$count==2)]
daters <- seq(stday, enday, by="day")
}
daters <- apply(seq(stday, enday, by="day"))
daters <- apply(function(x)seq(x[stday],x[enday], by="day"))
stday<- plz$date[which(plz$count==1[i])]
for(i in c(1:length(peps))) {
stday[i]<- plz$date[which(plz$count==1[i])]
enday[i]<- plz$date[which(plz$count==2[i])]
daters <- apply(seq(stday, enday, by="day"))
}
for(i in c(1:length(peps))) {
stday[i]<- plz$date[which(plz$count==1[i])]
enday[i]<- plz$date[which(plz$count==2[i])]
daters <- seq(stday, enday, by="day"))
}
for(i in c(1:length(peps))) {
stday[i]<- plz$date[which(plz$count==1[i])]
enday[i]<- plz$date[which(plz$count==2[i])]
daters <- seq(stday, enday, by="day"))
}
for(i in c(1:length(peps))) {
stday[i]<- plz$date[which(plz$count==1[i])]
enday[i]<- plz$date[which(plz$count==2[i])]
daters <- seq(stday, enday, by="day")
}
for(i in c(1:length(peps))) {
stday[i]<- plz$date[which(plz$count==1[i])]
enday[i]<- plz$date[which(plz$count==2[i])]
}
View(plz)
stday<- plz$date[which(plz$count==1)])
stday<- plz$date[which(plz$count==1)]
stday
enday<- plz$date[which(plz$count==2)]
enday
enday<- plz$date[which(plz$count==2),]
stday<- df[which(plz$count==1),]
View(stday)
stday<- plz$date[which(plz$count==1)]
enday<- plz$date[which(plz$count==2),]
df<-as.data.frame(paste(stday, enday))
View(df)
df<-as.data.frame(stday, enday)
df<-as.data.frame(st = stday, en = enday)
df<-data.frame(st = stday, en = enday)
stday<- plz$date[which(plz$count==1)]
enday<- plz$date[which(plz$count==2),]
stday<- plz$date[which(plz$count==1)]
enday<- plz$date[which(plz$count==2)]
df<-data.frame(st = stday, en = enday)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(arm)
library(data.table)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d<-read.csv("input/soil.moisture.csv",header=TRUE)
View(d)
mod<-lm(reading, percentage, data=d)
mod<-lm(reading~percent, data=d)
display(mod)
pear<-cor(reading, percent, data=d)
small<-dplyr::select(d, ID, reading, percent)
pear<-cor(small, method="pearson")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Integrate Phenology Data and compare methodologies
# Set Working Directory
setwd("~/Documents/git/springfreeze/input")
budburst<-read.csv("hf003-06-mean-spp.csv",header=TRUE, sep=",")
sp <- budburst %>%
dplyr::select(year, species, bb.jd) %>%
arrange(bb.jd) %>%
group_by(species, year)%>%
arrange(year)
df<-as.data.frame(table(budburst$species))
spp<- c("PRSE", "AMSP", "POTR", "CRSP", "HAVI", "ACSA", "BEPA", "ACPE", "ACRU", "QURU",
"BEAL", "BELE") ## Species that were observed each year
sp.short<- c("ACPE","ACRU","ACSA","FAGR","FRAM","HAVI","QUAL",
"QURU","PRSE", "AMSP", "POTR", "CRSP","BEPA",
"BEAL", "BELE", "COAL", "QUVE")
d <- budburst %>%
dplyr::select(year, species, bb.jd)%>%
filter(species %in% sp.short)
df<- d %>%
dplyr::select(species, bb.jd) %>%
arrange(bb.jd)
obs_bb.avg<- d %>%
dplyr::select(year,bb.jd)%>%
group_by(year)%>%
summarise_each(funs(mean), bb.jd) %>%
rename(mean=bb.jd)%>%
arrange(year)
obs_bb.sd<- d %>%
group_by(year)%>%
summarise_each(funs(sd), bb.jd) %>%
rename(sd=bb.jd)%>%
arrange(year)
obs_bb<- obs_bb.avg%>%
right_join(obs_bb.sd,obs_bb.avg,by="year")%>%
arrange(year)
compare<- read.csv("method.test.csv", header=TRUE, sep=",")
attach(compare)
#obs.npn<- obs_bb %>%
##full_join(compare) %>%
#dplyr::select(year, bb.jd, bb_npn)%>%
#arrange(year) %>%
#filter(year>=1990) %>%
#filter(year<2015)
## Species that are more comparable to lilacs and honeysuckle ##
sm.sp<- c("PRSE", "POTR", "AMSP", "CRSP", "HAVI", "ACSA", "BEPA", "ACPE")
small<- budburst%>%
dplyr::select(year, species, bb.jd) %>%
filter(species %in% sm.sp)
condensed<- small %>%
group_by(year)%>%
summarise_each(funs(mean),bb.jd)%>%
arrange(year)
sm.comp<- condensed %>%
full_join(compare) %>%
dplyr::select(year, bb.jd, bb_npn, last_frz) %>%
arrange(year) %>%
filter(year>=1990) %>%
filter(year<2015)
# Compares FSI values for small dataset of Dr O'Keefe's observational
# data and USNPN Spring Indices, based on -1.7 deg Celcius last freeze
method<-read.csv("method.test.csv",header=TRUE,sep=",")
#attach(method)
bb.table<-method %>%
dplyr::select(year,last_frz,bb_npn, sm.bb) %>%
filter(year>=2008)%>%
filter(year<2015)%>%
rename("Last Freeze"=last_frz)%>%
rename("Observed"=sm.bb)%>%
rename("SI-x"=bb_npn)
FSI.table<- method %>%
dplyr::select(year, FSI_npn, FSI_okeefe, FSI_cam) %>%
rename(okeefe = FSI_okeefe)%>%
rename(phenocam = FSI_cam) %>%
rename(npn = FSI_npn) %>%
filter(year>=2008) %>%
filter(year<2015)
bb.long<- method%>%
dplyr::select(year,bb_npn,sm.bb, bb_obs, bb_cam)%>%
filter(year>=2001)%>%
filter(year<2015)
blend<-FSI.table %>%
gather(Method, FSI, -year) %>%
arrange(year)
blend.long<-FSI.long%>%
gather(Method,FSI,-year)%>%
arrange(year)
ggplot(blend, (aes(Method, FSI)), xlab="Method", ylab="FSI") +
geom_boxplot(fill=c("#F8766D","#00C094","#00B6EB","#A58AFF"))
boxplot(data=blend, FSI~Method, xlab="Method", ylab="FSI")
boxplot(data=blend.long, FSI~Method)
methodplot<-ggplot(blend, aes(year, FSI)) + xlab("Year") +
ylab("False Spring Index") + scale_x_continuous(limits = c(2008,2014),breaks=seq(2008,2014,1)) +
geom_point(aes(col=Method)) + scale_color_manual(values=c("#F8766D","#00C094","#00B6EB","#A58AFF")) +
geom_line(aes(x=year, y=FSI, col=Method))
plot(methodplot)
ggplot(dt) +
geom_line(aes(x=date,y=value, color = prevadjuster, group = 1)) +
geom_line(aes(x=date,y=value, color = adjuster, group = 1)) +
geom_point(aes(x=date,y=value, color = adjuster, group = 1))
longplot<-ggplot(blend.long,aes(year,FSI)) +xlab("Year") +
ylab("False Spring Index") + scale_x_continuous(limits = c(2001,2014),breaks=seq(2001,2014,1)) +
geom_point(aes(col=Method)) + scale_color_manual(values=c("#00C094","#00B6EB","#A58AFF"))
plot(longplot)
fit<-glm(FSI~Method + year, data=blend)
fit
#tidy(fit)
#head(augment(fit))
#glance(fit)
plot(fit)
filter(year<2015)
regression <- glm(formula = FSI_npn ~ FSI_sm + year,
data = npn_sm)
summary(regression)
pearson<-cor(FSI.table, method="pearson")
pearson
View(FSI.table)
View(pearson)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(arm)
library(data.table)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d<-read.csv("input/soil.moisture.csv",header=TRUE)
mod<-lm(reading~percent, data=d)
display(mod)
small<-dplyr::select(d, ID, reading, percent)
pear<-cor(small, method="pearson")
View(small)
small<-na.omit(small)
pear<-cor(small, method="pearson")
View(small)
small$ID<-substr(small$ID, 9,10)
pear<-cor(small, method="pearson")
View(small)
small$ID<-as.numeric(substr(small$ID, 9,10))
pear<-cor(small, method="pearson")
View(pear)
plot(reading~percent, data=small)
small<-dplyr::select(d, reading, percent)
small<-na.omit(small)
pear<-cor(small, method="pearson")
View(pear)
abline(reading~percent, col="red")
plot(reading~percent, data=small)
abline(reading~percent, col="red")
mod<-lm(reading~percent, data=d)
display(mod)
summary(mod)
Anova(mod)
library(car)
Anova(mod)
plot1<-plot(reading~percent, data=small)
abline(plot1, col="red")
plot1<-plot(reading~percent, data=small)
plot(plot1)
abline(plot1, col="red")
plot(reading~percent, data=small)
abline(percent, reading, col="red")
plot(reading~percent, data=small)
abline(small$percent, small$reading, col="red")
plot(reading~percent, data=small)
abline(mod)
plot(reading~percent, data=small)
abline(mod, col="red")
