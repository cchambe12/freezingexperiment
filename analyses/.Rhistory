bb$lo<-ave(bb$leafout, bb$individ)
bb<-dplyr::select(bb, -budburst, -leafout)
bb<-bb[!duplicated(bb),]
# Start of Experiment was: 24 March 2017
start<-yday("2017/03/24")
bb$frz<-bb$frz-start
bb$dvr<-bb$lo-bb$bb
###### Time to clean buds experiment...
dx<-gather(whole, key=doy, value=bbch, -NEW, -TX)
keep<-unique(to.keep$id[to.keep$exp=="whole"])
dx<-filter(dx, NEW%in%keep)
dx$day<-substr(dx$doy, 2, 3)
dx$month<-substr(dx$doy, 5, 6)
dx$year<-substr(dx$doy, 8,11)
x<-paste(dx$year, dx$day, dx$month)
dx$date<-as.Date(strptime(x, format="%Y %d %m"))
dx$doy<-yday(dx$date)
start<-yday("2017/02/09")
dx$doy.adjusted<-dx$doy-start
dx<-dx[!is.na(dx$bbch),]
dx<-dx%>%dplyr::select(NEW, doy.adjusted, bbch)
last<-aggregate(dx$doy.adjusted, by = list(dx$NEW), max)
last<-last%>%rename(individ=Group.1)%>%rename(doy.adjusted=x)
last$leaf<-NA
for(i in c(1:nrow(last))) {
for(j in c(1:nrow(dx)))
if(last$individ[i]==dx$NEW[j] & last$doy.adjusted[i]==dx$doy.adjusted[j])
last$leaf[i]<-dx$bbch[j]
}
first<-aggregate(dx$doy.adjusted, by = list(dx$NEW), min)
first<-first%>%rename(individ=Group.1)%>%rename(doy.adjusted=x)
first$bb<-NA
for(i in c(1:nrow(first))) {
for(j in c(1:nrow(dx)))
if(first$individ[i]==dx$NEW[j] & first$doy.adjusted[i]==dx$doy.adjusted[j])
first$bb[i]<-dx$bbch[j]
}
first<-first%>%rename(budburst=doy.adjusted)%>%rename(bbch.first=bb)
last<-last%>%rename(leafout=doy.adjusted)%>%rename(bbch.last=leaf)
risk<-full_join(first, last)
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(1:nrow(to.keep)))
risk$tx[i]<-ifelse(risk$individ[i]==to.keep$id[j], to.keep$tx[j], risk$tx)
}
risk$tx<-ifelse(risk$tx==to.keep$id, to.keep$tx, risk$tx)
class()
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(to.keep)))
risk$tx[i]<-ifelse(risk$tx[i]==to.keep$id[j], to.keep$tx[i], risk$tx[j])
}
risk$tx<-ifelse(risk$individ==to.keep$id, to.keep$tx, risk$tx)
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(to.keep)))
risk$tx[i]<-ifelse(risk$individ[i]==to.keep$id[j], to.keep$tx[i], risk$tx[j])
}
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(to.keep)))
risk$tx[i]<-ifelse(risk$individ[i]==to.keep$id[j], to.keep$tx[j], risk$tx[i])
}
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(to.keep)))
risk$tx[i]<-ifelse(risk$individ[i]==to.keep$id[j], to.keep$tx[j], risk$tx[i])
}
class(to.keep$tx)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(lme4)
library(arm)
library(gridExtra)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
#### Let's add in the other individuals now...
budspp<-read.csv("output/birches_speciesdata.csv", header=TRUE)
whole<-read.csv("input/bbch_data.csv", header=TRUE)
to.keep<-read.csv("..//planting/freezing_planting.csv", header=TRUE)
bb<-budspp[!is.na(budspp$dvr),]
bb$avg.rate<-ave(bb$dvr, bb$individ)
bb<-dplyr::select(bb, individ, species, budburst, leafout, frz, tx, avg.rate)
bb$bb<-ave(bb$budburst, bb$individ)
bb$lo<-ave(bb$leafout, bb$individ)
bb<-dplyr::select(bb, -budburst, -leafout)
bb<-bb[!duplicated(bb),]
# Start of Experiment was: 24 March 2017
start<-yday("2017/03/24")
bb$frz<-bb$frz-start
bb$dvr<-bb$lo-bb$bb
###### Time to clean buds experiment...
dx<-gather(whole, key=doy, value=bbch, -NEW, -TX)
keep<-unique(to.keep$id[to.keep$exp=="whole"])
dx<-filter(dx, NEW%in%keep)
dx$day<-substr(dx$doy, 2, 3)
dx$month<-substr(dx$doy, 5, 6)
dx$year<-substr(dx$doy, 8,11)
x<-paste(dx$year, dx$day, dx$month)
dx$date<-as.Date(strptime(x, format="%Y %d %m"))
dx$doy<-yday(dx$date)
start<-yday("2017/02/09")
dx$doy.adjusted<-dx$doy-start
dx<-dx[!is.na(dx$bbch),]
dx<-dx%>%dplyr::select(NEW, doy.adjusted, bbch)
last<-aggregate(dx$doy.adjusted, by = list(dx$NEW), max)
last<-last%>%rename(individ=Group.1)%>%rename(doy.adjusted=x)
last$leaf<-NA
for(i in c(1:nrow(last))) {
for(j in c(1:nrow(dx)))
if(last$individ[i]==dx$NEW[j] & last$doy.adjusted[i]==dx$doy.adjusted[j])
last$leaf[i]<-dx$bbch[j]
}
first<-aggregate(dx$doy.adjusted, by = list(dx$NEW), min)
first<-first%>%rename(individ=Group.1)%>%rename(doy.adjusted=x)
first$bb<-NA
for(i in c(1:nrow(first))) {
for(j in c(1:nrow(dx)))
if(first$individ[i]==dx$NEW[j] & first$doy.adjusted[i]==dx$doy.adjusted[j])
first$bb[i]<-dx$bbch[j]
}
first<-first%>%rename(budburst=doy.adjusted)%>%rename(bbch.first=bb)
last<-last%>%rename(leafout=doy.adjusted)%>%rename(bbch.last=leaf)
risk<-full_join(first, last)
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(to.keep)))
risk$tx[i]<-ifelse(risk$individ[i]==to.keep$id[j], to.keep$tx[j], risk$tx[i])
}
View(to.keep)
txs<-to.keep[which(to.keep$exp=="whole"),]
View(txs)
txs<-dplyr::select(txs, id, tx)
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(txs)))
risk$tx[i]<-ifelse(risk$individ[i]==txs$id[j], txs$tx[j], risk$tx[i])
}
class(risk$individ)
class(txs$id)
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(txs)))
if(risk$individ[i]==to.keep[j])
risk$tx[i]<-to.keep$tx[j]
}
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(to.keep)))
if(risk$individ[i]==to.keep[j])
risk$tx[i]<-to.keep$tx[j]
}
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(to.keep)))
if(risk$individ[i]==to.keep$id[j])
risk$tx[i]<-to.keep$tx[j]
}
match(risk$individ, to.keep$id)
View(to.keep)
View(whole)
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(whole)))
if(risk$individ[i]==whole$NEW[j])
risk$tx[i]<-whole$TX[j]
}
list(is.na(risk$tx))
bad<-risk[is.na(risk$tx),]
bad
risk$tx<-ifelse(risk$individ=="ACEPEN_W07", "A", risk$tx)
risk$tx<-ifelse(risk$individ=="ACEPEN_W012", "A", risk$tx)
risk$tx<-ifelse(risk$individ=="ACEPEN_W13", "A", risk$tx)
bad<-risk[is.na(risk$tx),]
bad
risk$tx<-ifelse(risk$individ=="ACEPEN_W12", "A", risk$tx)
bad<-risk[is.na(risk$tx),]
bad
risk$dvr<-risk$leafout-risk$budburst
risk<-risk%>%
rename(bb=budburst)%>%
rename(lo=leafout)%>%
dplyr::select(-bbch.first, -bbch.last)
risk$species<-substr(risk$individ, 1, 6)
risk$site<-substr(risk$individ, 8, 8)
risk$site<-ifelse(risk$site=="W", "WM", risk$site)
risk$site<-ifelse(risk$site=="G", "GR", risk$site)
risk$site<-ifelse(risk$site=="S", "SH", risk$site)
dvr<-rbind(risk, bb)
bb$site<-substr(bb$individ, 8, 8)
bb$site<-ifelse(bb$site=="W", "WM", bb$site)
bb$site<-ifelse(bb$site=="G", "GR", bb$site)
dvr<-rbind(risk, bb)
bb<-dplyr::select(bb, individ, species, tx, bb, lo, dvr, site)
risk<-dplyr::select(risk, individ, species, tx, bb, lo, dvr, site)
dvr<-rbind(risk, bb)
View(dvr)
dvr<-rbind(risk, bb, digits=2)
View(dvr)
dvr<-rbind(risk, bb)
View(dvr)
mod<-lm(dvr~tx+species+site, data=dvr)
display(mod)
mod<-lm(dvr~tx+species, data=dvr)
display(mod)
mod1<-lmer(dvr~tx+(1|species), data=dvr)
display(mod1)
qplot(species, dvr, data = dvr,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Duration of Vegetative Risk")
vib<-filter(dvr, species="VIBCAS")
vib<-filter(dvr, species=="VIBCAS")
mod3<-lm(dvr~site+tx, data=vib)
display(mod3)
write.csv(dvr, file=("~/Documents/git/freezingexperiment/analyses/output/whole_dvr.csv"), row.names = FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
# make sure this is the correct file (we're still cleaning as I write this!)
bb <- read.csv("output/whole_dvr.csv", header=TRUE)
## make a bunch of things numeric
bb$tx <- as.numeric(bb$tx)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "species"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
#ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
ospr.stan$individ <- as.numeric(as.factor(ospr.stan$individ))
y = ospr.stan$resp
tx = ospr.stan$tx
sp = ospr.stan$species
N = length(y)
n_sp = length(unique(ospr.stan$species))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx, bud=bud,sp=sp,N=N,n_sp=n_sp)
##############################
###### real data all chilling
osp.td4 = stan('scripts/Whole_speciesLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
datalist.td <- list(y=y,tx=tx,sp=sp,N=N,n_sp=n_sp)
osp.td4 = stan('scripts/Whole_speciesLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
# make sure this is the correct file (we're still cleaning as I write this!)
bb <- read.csv("output/whole_dvr.csv", header=TRUE)
## make a bunch of things numeric
bb$tx <- as.numeric(bb$tx)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "species"))
dim(subset(bb, is.na(tx)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
#ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
ospr.stan$species <- as.numeric(as.factor(ospr.stan$species))
y = ospr.stan$resp
tx = ospr.stan$tx
sp = ospr.stan$species
N = length(y)
n_sp = length(unique(ospr.stan$species))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx,sp=sp,N=N,n_sp=n_sp)
##############################
###### real data all chilling
osp.td4 = stan('scripts/Whole_speciesLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
View(ospr.prepdata)
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(bb$tx)
bb$resp <- as.numeric(bb$dvr)
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
setwd("~/Documents/git/freezingexperiment/analyses/")
source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb <- read.csv("output/whole_dvr.csv", header=TRUE)
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(bb$tx)
bb$resp <- as.numeric(bb$dvr)
View(bb)
ospr.prepdata <- subset(bb, select=c("resp", "tx", "species"))
View(bb)
View(ospr.prepdata)
dim(subset(bb, is.na(tx)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$species <- as.numeric(as.factor(ospr.stan$species))
y = ospr.stan$resp
tx = ospr.stan$tx
sp = ospr.stan$species
N = length(y)
n_sp = length(unique(ospr.stan$species))
datalist.td <- list(y=y,tx=tx,sp=sp,N=N,n_sp=n_sp)
osp.td4 = stan('scripts/Whole_speciesLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx_ind","mu_b_bud_ind",
"b_tx", "b_bud"))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx_sp",
"b_tx"))
mcmc_intervals(betas[,1:4])
launch_shinystan(osp.td4)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(lme4)
library(arm)
library(gridExtra)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d <-read.csv("input/Buds_clean.csv", header=TRUE, check.names=FALSE)
################ Cleaning data ##################################
# remove individuals that were frosted twice
error.inds<-d%>%dplyr::select(NEW,Freeze)
error.inds<-error.inds[!duplicated(error.inds),]
#error.inds$Freeze<-ifelse(error.inds$Freeze=="", NA, error.inds$Freeze)
#error.inds<-na.omit(error.inds)
error.inds<-as.data.frame(table(error.inds$NEW))
error.inds<-filter(error.inds, Freq!=3)
keep<-unique(error.inds$Var1)
## Clean dataframe for analysis
dx<-gather(d, key=doy, value=bbch, -NEW, -TX, -Freeze, -Bud)
dx<-filter(dx, NEW %in% keep)
dx$day<-substr(dx$doy, 1, 2)
dx$month<-substr(dx$doy, 4, 5)
dx$year<-substr(dx$doy, 7,10)
x<-paste(dx$year, dx$day, dx$month)
dx$date<-as.Date(strptime(x, format="%Y %d %m"))
dx$doy<-yday(dx$date)
### DOY should now be adjusted for start of experiment rather than actual calendar doy
# Start of Experiment was: 24 March 2017
start<-yday("2017/03/24")
dx$doy.adjusted<-dx$doy-start
dx$bud <- ave(dx$Bud, dx$NEW, dx$date, FUN = seq_along)
# Quick check...
dvr<-dx[!is.na(dx$bbch),]
done<-c("DONE!", "DONE", "DONE!!", "missed","(missed)", "")
dvr<-dvr[!dvr$bbch%in%done,]
dead<-c("stem snapped", "x", "dead")
dvr$bbch<-ifelse(dvr$bbch%in%dead, 0, dvr$bbch)
dvr$bud<-as.numeric(dvr$bud)
dvr$ID<-paste(dvr$NEW, dvr$bud, sep="_")
dvr<-dvr%>%dplyr::select(ID, doy.adjusted, bbch)
last<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), max)
last<-last%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
last$leaf<-NA
for(i in c(1:nrow(last))) {
for(j in c(1:nrow(dvr)))
if(last$ID[i]==dvr$ID[j] & last$doy.adjusted[i]==dvr$doy.adjusted[j])
last$leaf[i]<-dvr$bbch[j]
}
first<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), min)
first<-first%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
first$bb<-NA
for(i in c(1:nrow(first))) {
for(j in c(1:nrow(dvr)))
if(first$ID[i]==dvr$ID[j] & first$doy.adjusted[i]==dvr$doy.adjusted[j])
first$bb[i]<-dvr$bbch[j]
}
############## Determine Duration of Vegetative Risk #################
##### Need to clean data a lot - remove early incorrectly entered data
## and edit errors from when I was away
## then determine dead buds and if any reached budburst and then died
## If so to above, need to recalculate percent budburst
first<-first%>%rename(budburst=doy.adjusted)%>%rename(bbch.first=bb)
last<-last%>%rename(leafout=doy.adjusted)%>%rename(bbch.last=leaf)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
###### Now integrate FS ###########
frz<-subset(dx,TX=="B")
frz<-dplyr::select(frz, NEW, Freeze, bud)
frz$day<-substr(frz$Freeze, 1, 2)
frz$month<-substr(frz$Freeze, 4, 5)
frz$year<-substr(frz$Freeze, 7,10)
x<-paste(frz$year, frz$day, frz$month)
frz$date<-as.Date(strptime(x, format="%Y %d %m"))
frz$frz<-yday(frz$date)
frz<-dplyr::select(frz, NEW, frz)
frz<-na.omit(frz)
frz<-frz[!duplicated(frz),]
risk$frz<-NA
for(i in c(1:nrow(risk))) {
for(j in c(1:nrow(frz)))
if(risk$individ[i]==frz$NEW[j])
risk$frz[i]<-frz$frz[j]
}
risk$frz<- risk$frz-start
risk$tx<-ifelse(is.na(risk$frz), "A", "B")
risk$dvr<-ifelse(risk$bbch.last==15, (risk$leafout-risk$budburst), NA)
risk$frost<-ifelse(risk$bbch.first<=risk$frz, 1, 0)
risk$frost<-ifelse(risk$tx=="A", 0, risk$frost)
risk$bud<-as.numeric(risk$bud)
mod1<-lm(dvr~bud+species+frost, data=birch)
display(mod1)
betula<-c("BETPOP", "BETPAP")
birch<-subset(risk, risk$species%in%betula)
mod2<-glm(dvr~bud+species+frost, data=birch)
display(mod2)
mod3<-glm(dvr~species+bud*tx, data=birch)
display(mod3)
mod4<-lmer(dvr~bud+frost+(1|species), data=birch)
display(mod4)
bpap<-ggplot(birch, aes(x=bud, y=dvr, color=tx)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
birch.mean<-birch[!is.na(birch$dvr),]
birch.mean$avg.rate<-ave(birch.mean$dvr, birch.mean$individ)
hist(birch.mean$avg.rate)
M1<-lm(avg.rate~tx+species, data=birch.mean)
display(M1)
qplot(species, avg.rate, data = birch.mean,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Mean DVR")
###### Re-evaluated % budburst #######
burst<-risk[!is.na(risk$dvr),]
burst<-distinct(burst, ID,individ)
burst<-as.data.frame(table(burst$individ))
burst<-burst%>%rename(individ=Var1)%>%rename(burst=Freq)
burst$individ<-as.character(burst$individ)
total<-risk
total<-distinct(total, ID,individ)
total<-as.data.frame(table(total$individ))
total<-total%>%rename(individ=Var1)%>%rename(total=Freq)
total$individ<-as.character(total$individ)
percent<-full_join(total, burst)
percent$perc.bb<-percent$burst/percent$total
percent$species<-substr(percent$individ, 1,6)
percent$tx<-NA
percent$tx<-as.character(percent$tx)
for(i in c(1:nrow(percent))){
for(j in c(1:nrow(risk)))
if(percent$individ[i]==risk$individ[j])
percent$tx[i]<-risk$tx[j]
}
percent$species<-substr(percent$individ, 1, 6)
percent<-subset(percent, species %in% betula)
mod<-lm(perc.bb~tx + species, data=percent)
display(mod)
qplot(species, perc.bb, data = percent,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Percent Budburst")
birch$ind<-substr(birch$individ, 9, 10)
new.mod<-lmer(dvr~frost+bud+(1|ind/species), data=birch)
display(new.mod)
mod1<-lm(dvr~bud+species+frost, data=risk)
display(mod1)
mod2<-glm(dvr~bud+species+frost, data=risk)
display(mod2)
mod3<-glm(dvr~species+bud*tx, data=risk)
display(mod3)
mod4<-lmer(dvr~bud+frost+(1|species), data=risk)
display(mod4)
View(risk)
mod4<-lmer(dvr~bud+frost+(1|individ/species), data=risk)
bpap<-ggplot(risk, aes(x=bud, y=dvr, color=tx)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
bpap
percent<-full_join(total, burst)
percent$perc.bb<-percent$burst/percent$total
percent$species<-substr(percent$individ, 1,6)
percent$tx<-NA
percent$tx<-as.character(percent$tx)
for(i in c(1:nrow(percent))){
for(j in c(1:nrow(risk)))
if(percent$individ[i]==risk$individ[j])
percent$tx[i]<-risk$tx[j]
}
percent$species<-substr(percent$individ, 1, 6)
mod<-lm(perc.bb~tx + species, data=percent)
display(mod)
qplot(species, perc.bb, data = percent,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Percent Budburst")
