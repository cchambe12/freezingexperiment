# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2,
labels=c("A","B"))
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme((legend.position = position), labels=c("A","B")))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme((legend.position="none"), labels=c("A","B")))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
labels = c("A", "B"),
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
install.packages("cowplot")
library(cowplot)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs")  +
guides(size=FALSE)
plot2 <- eur.map
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
legend <- get_legend(eur.map)
eur.map <- eur.map + theme(legend.position="none")
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.3, 2.3, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B", ""))
grid.arrange(am.map, eur.map, legend, ncol=2, nrow = 2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(lme4)
library(arm)
library(car)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d <-read.csv("input/bbch_data.csv", header=TRUE, check.names=FALSE)
# Organizing data
df<-gather(d, "date","bbch", -NEW, -TX)
df<-na.omit(df)
df$date<-as.character(as.Date(df$date,"%m/%d/%y"))
df$doy<-yday(df$date)
df$species<-substr(df$NEW, 0,6)
df<-dplyr::select(df, -date)
# Now start evaluating duration of vegetative risk
# 9 is using 9 as budburst, 10 is using 10. Some individuals, I missed 9 so it
# was sometime in between the observation dates
phases.9<-c("9","15")
df9<-filter(df, bbch %in% phases.9)
df9$bbch<- factor(df9$bbch, levels = c(9,15),
labels = c("Budburst","Leaves"))
code<-unite_(df9, "species_TX", c("species","TX"))
df9<-full_join(df9, code)
risk9<- df9%>%
group_by(NEW, bbch, species_TX)%>%
arrange(NEW)%>%
filter(row_number()==1) %>%
spread(bbch, doy)
risk9<-na.omit(risk9)
risk9$Risk <- risk9$Leaves - risk9$Budburst
# Some graphs
ggplot(risk9, aes(x=species, y=Risk)) + geom_point(aes(col=as.factor(TX))) +
geom_smooth(aes(col=as.factor(TX)),method="loess", se=FALSE)
ggplot((risk9), aes(x=Budburst, y=NEW), stat="identity") + geom_point(aes(x= risk9$Budburst)) +
geom_segment(aes(y = NEW, yend = NEW, x = Budburst, xend = Leaves, col=TX)) +
geom_point(aes(x=Leaves, col=TX)) + geom_point(aes(col=TX)) +
xlab("Budburst to Leaf Out") +
ylab("Species")
# Means and Standard deviations
risk<-risk9%>%
ungroup(NEW, Risk)%>%
dplyr::select(species_TX, Risk)
risk.mean<- risk%>%
group_by(species_TX) %>%
summarise_each(funs(mean))%>%
rename(mean=Risk)
risk.sd<-risk%>%
group_by(species_TX) %>%
summarise_each(funs(sd)) %>%
rename(sd=Risk)
risk.count<-as.data.frame(table(risk$species_TX)) %>%
rename(species_TX=Var1)%>%
rename(count=Freq)
risk.species<-full_join(risk.mean, risk.sd)
risk.species.tx<-full_join(risk.species,risk.count)
tx.count<-as.data.frame(table(risk9$TX))%>%
rename(TX=Var1)%>%
rename(count=Freq)
tx<-risk9%>%
ungroup(NEW, Risk)%>%
dplyr::select(TX, Risk)
tx.mean<- tx%>%
group_by(TX) %>%
summarise_each(funs(mean))%>%
rename(mean=Risk)
tx.sd<-tx%>%
group_by(TX) %>%
summarise_each(funs(sd)) %>%
rename(sd=Risk)
tx.species<-full_join(tx.mean, tx.sd)
tx.species.count<-full_join(tx.species,tx.count)
#write.csv(tx.species.count, "output/tx_count.csv", row.names = FALSE)
mod<-lm(Risk~TX, data=risk9)
lmer<-lmer(Risk~TX + (1|species),data=risk9)
display(mod);display(lmer)
ggplot((risk9), aes(x=Budburst, y=Risk)) + xlab("Budburst") + ylab("Duration of Vegetative Risk") +
geom_point(aes(col=as.factor(TX))) +
geom_smooth(aes(col=as.factor(TX)),method="lm", se=FALSE)
qplot(species, Risk, data = risk9,
geom = "boxplot", color=TX) +
xlab("Species")+ylab("Duration of Vegetative Risk")
# Anova
model<-lm(Risk~TX+Budburst+species,data=risk9)
Anova(model)
# ALNINC
alninc<-risk9 %>% filter(species=="ALNINC")
aln.mod<-lm(Risk~TX,data=alninc)
Anova(aln.mod)
# BETPOP
betpop<-risk9 %>% filter(species=="BETPOP")
bet.mod<-lm(Risk~TX,data=betpop)
Anova(bet.mod)
# PRUPEN
prupen<-risk9 %>% filter(species=="PRUPEN")
pru.mod<-lm(Risk~TX,data=prupen)
Anova(pru.mod)
# VIBCAS
vibcas<-risk9 %>% filter(species=="VIBCAS")
vib.mod<-lm(Risk~TX,data=vibcas)
Anova(vib.mod)
#write.csv(risk.species.tx, "output/exp.species.count.csv", row.names = FALSE)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(lme4)
library(arm)
library(car)
setwd("~/Documents/git/freezingexperiment/analyses")
d <-read.csv("input/bbch_data.csv", header=TRUE, check.names=FALSE)
View(d)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(lme4)
library(arm)
library(car)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d <-read.csv("input/bbch_data.csv", header=TRUE, check.names=FALSE)
# Organizing data
df<-gather(d, "date","bbch", -NEW, -TX)
df<-na.omit(df)
df$date<-as.character(as.Date(df$date,"%m/%d/%y"))
df$doy<-yday(df$date)
df$species<-substr(df$NEW, 0,6)
df<-dplyr::select(df, -date)
# Now start evaluating duration of vegetative risk
# 9 is using 9 as budburst, 10 is using 10. Some individuals, I missed 9 so it
# was sometime in between the observation dates
phases.9<-c("9","15")
df9<-filter(df, bbch %in% phases.9)
df9$bbch<- factor(df9$bbch, levels = c(9,15),
labels = c("Budburst","Leaves"))
code<-unite_(df9, "species_TX", c("species","TX"))
df9<-full_join(df9, code)
risk9<- df9%>%
group_by(NEW, bbch, species_TX)%>%
arrange(NEW)%>%
filter(row_number()==1) %>%
spread(bbch, doy)
risk9<-na.omit(risk9)
risk9$Risk <- risk9$Leaves - risk9$Budburst
# Some graphs
ggplot(risk9, aes(x=species, y=Risk)) + geom_point(aes(col=as.factor(TX))) +
geom_smooth(aes(col=as.factor(TX)),method="loess", se=FALSE)
ggplot((risk9), aes(x=Budburst, y=NEW), stat="identity") + geom_point(aes(x= risk9$Budburst)) +
geom_segment(aes(y = NEW, yend = NEW, x = Budburst, xend = Leaves, col=TX)) +
geom_point(aes(x=Leaves, col=TX)) + geom_point(aes(col=TX)) +
xlab("Budburst to Leaf Out") +
ylab("Species")
# Means and Standard deviations
risk<-risk9%>%
ungroup(NEW, Risk)%>%
dplyr::select(species_TX, Risk)
risk.mean<- risk%>%
group_by(species_TX) %>%
summarise_each(funs(mean))%>%
rename(mean=Risk)
risk.sd<-risk%>%
group_by(species_TX) %>%
summarise_each(funs(sd)) %>%
rename(sd=Risk)
risk.count<-as.data.frame(table(risk$species_TX)) %>%
rename(species_TX=Var1)%>%
rename(count=Freq)
risk.species<-full_join(risk.mean, risk.sd)
risk.species.tx<-full_join(risk.species,risk.count)
tx.count<-as.data.frame(table(risk9$TX))%>%
rename(TX=Var1)%>%
rename(count=Freq)
tx<-risk9%>%
ungroup(NEW, Risk)%>%
dplyr::select(TX, Risk)
tx.mean<- tx%>%
group_by(TX) %>%
summarise_each(funs(mean))%>%
rename(mean=Risk)
tx.sd<-tx%>%
group_by(TX) %>%
summarise_each(funs(sd)) %>%
rename(sd=Risk)
tx.species<-full_join(tx.mean, tx.sd)
tx.species.count<-full_join(tx.species,tx.count)
#write.csv(tx.species.count, "output/tx_count.csv", row.names = FALSE)
mod<-lm(Risk~TX, data=risk9)
lmer<-lmer(Risk~TX + (1|species),data=risk9)
display(mod);display(lmer)
ggplot((risk9), aes(x=Budburst, y=Risk)) + xlab("Budburst") + ylab("Duration of Vegetative Risk") +
geom_point(aes(col=as.factor(TX))) +
geom_smooth(aes(col=as.factor(TX)),method="lm", se=FALSE)
qplot(species, Risk, data = risk9,
geom = "boxplot", color=TX) +
xlab("Species")+ylab("Duration of Vegetative Risk")
# Anova
model<-lm(Risk~TX+Budburst+species,data=risk9)
Anova(model)
# ALNINC
alninc<-risk9 %>% filter(species=="ALNINC")
aln.mod<-lm(Risk~TX,data=alninc)
Anova(aln.mod)
# BETPOP
betpop<-risk9 %>% filter(species=="BETPOP")
bet.mod<-lm(Risk~TX,data=betpop)
Anova(bet.mod)
# PRUPEN
prupen<-risk9 %>% filter(species=="PRUPEN")
pru.mod<-lm(Risk~TX,data=prupen)
Anova(pru.mod)
# VIBCAS
vibcas<-risk9 %>% filter(species=="VIBCAS")
vib.mod<-lm(Risk~TX,data=vibcas)
Anova(vib.mod)
#write.csv(risk.species.tx, "output/exp.species.count.csv", row.names = FALSE)
View(tx.species.count)
View(tx.species.count)
