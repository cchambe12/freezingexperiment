# Quick check...
dvr<-dx[!is.na(dx$bbch),]
done<-c("DONE!", "DONE", "DONE!!", "missed","(missed)", "")
dvr<-dvr[!dvr$bbch%in%done,]
dead<-c("stem snapped", "x", "dead")
dvr$bbch<-ifelse(dvr$bbch%in%dead, 0, dvr$bbch)
dvr$bud<-as.numeric(dvr$bud)
dvr$ID<-paste(dvr$NEW, dvr$bud, sep="_")
dvr<-dvr%>%dplyr::select(ID, doy.adjusted, bbch)
last<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), max)
last<-last%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
last$leaf<-NA
for(i in c(1:nrow(last))) {
for(j in c(1:nrow(dvr)))
if(last$ID[i]==dvr$ID[j] & last$doy.adjusted[i]==dvr$doy.adjusted[j])
last$leaf[i]<-dvr$bbch[j]
}
first<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), min)
first<-first%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
first$bb<-NA
for(i in c(1:nrow(first))) {
for(j in c(1:nrow(dvr)))
if(first$ID[i]==dvr$ID[j] & first$doy.adjusted[i]==dvr$doy.adjusted[j])
first$bb[i]<-dvr$bbch[j]
}
############## Determine Duration of Vegetative Risk #################
##### Need to clean data a lot - remove early incorrectly entered data
## and edit errors from when I was away
## then determine dead buds and if any reached budburst and then died
## If so to above, need to recalculate percent budburst
first<-first%>%rename(budburst=doy.adjusted)%>%rename(bbch.first=bb)
last<-last%>%rename(leafout=doy.adjusted)%>%rename(bbch.last=leaf)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
###### Now integrate FS ###########
frz<-subset(dx,TX=="B")
frz<-dplyr::select(frz, NEW, Freeze, bud)
frz$day<-substr(frz$Freeze, 1, 2)
frz$month<-substr(frz$Freeze, 4, 5)
frz$year<-substr(frz$Freeze, 7,10)
x<-paste(frz$year, frz$day, frz$month)
frz$date<-as.Date(strptime(x, format="%Y %d %m"))
frz$frz<-yday(frz$date)
frz<-dplyr::select(frz, NEW, frz)
frz<-na.omit(frz)
frz<-frz[!duplicated(frz),]
risk$frz<-NA
for(i in c(1:nrow(risk))) {
for(j in c(1:nrow(frz)))
if(risk$individ[i]==frz$NEW[j])
risk$frz[i]<-frz$frz[j]
}
risk$tx<-ifelse(is.na(risk$frz), "A", "B")
leaf<-c(14, 15)
risk$dvr<-ifelse(risk$bbch.last%in%leaf, (risk$leafout-risk$budburst), NA)
risk$frost<-ifelse(risk$bbch.first<=risk$frz, TRUE, FALSE)
risk$frost<-ifelse(risk$tx=="A", FALSE, risk$frost)
risk$bud<-as.numeric(risk$bud)
mod1<-glm(dvr~bud+species+frost, data=risk)
display(mod1)
betula<-c("BETPOP", "BETPAP")
birch<-subset(risk, risk$species%in%betula)
mod2<-glm(dvr~bud+species+frost, data=birch)
display(mod2)
mod3<-glm(dvr~species+bud*tx, data=birch)
display(mod3)
bpap<-ggplot(birch, aes(x=bud, y=dvr, color=tx)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
###### Re-evaluated % budburst #######
burst<-risk[!is.na(risk$dvr),]
burst<-distinct(burst, ID,individ)
burst<-as.data.frame(table(burst$individ))
burst<-burst%>%rename(individ=Var1)%>%rename(burst=Freq)
burst$individ<-as.character(burst$individ)
total<-risk
total<-distinct(total, ID,individ)
total<-as.data.frame(table(total$individ))
total<-total%>%rename(individ=Var1)%>%rename(total=Freq)
total$individ<-as.character(total$individ)
percent<-full_join(total, burst)
percent$perc.bb<-percent$burst/percent$total
percent$species<-substr(percent$individ, 1,6)
percent$tx<-NA
percent$tx<-as.character(percent$tx)
for(i in c(1:nrow(percent))){
for(j in c(1:nrow(risk)))
if(percent$individ[i]==risk$individ[j])
percent$tx[i]<-risk$tx[j]
}
percent$species<-substr(percent$individ, 1, 6)
mod<-lm(perc.bb~tx + species, data=percent)
display(mod)
qplot(species, perc.bb, data = percent,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Percent Budburst")
bpap
risk$dvr<-ifelse(risk$bbch.last==15, (risk$leafout-risk$budburst), NA)
risk$frost<-ifelse(risk$bbch.first<=risk$frz, TRUE, FALSE)
risk$frost<-ifelse(risk$tx=="A", FALSE, risk$frost)
risk$bud<-as.numeric(risk$bud)
mod1<-glm(dvr~bud+species+frost, data=risk)
display(mod1)
betula<-c("BETPOP", "BETPAP")
birch<-subset(risk, risk$species%in%betula)
mod2<-glm(dvr~bud+species+frost, data=birch)
display(mod2)
mod3<-glm(dvr~species+bud*tx, data=birch)
display(mod3)
bpap<-ggplot(birch, aes(x=bud, y=dvr, color=tx)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
###### Re-evaluated % budburst #######
burst<-risk[!is.na(risk$dvr),]
burst<-distinct(burst, ID,individ)
burst<-as.data.frame(table(burst$individ))
burst<-burst%>%rename(individ=Var1)%>%rename(burst=Freq)
burst$individ<-as.character(burst$individ)
total<-risk
total<-distinct(total, ID,individ)
total<-as.data.frame(table(total$individ))
total<-total%>%rename(individ=Var1)%>%rename(total=Freq)
total$individ<-as.character(total$individ)
percent<-full_join(total, burst)
percent$perc.bb<-percent$burst/percent$total
percent$species<-substr(percent$individ, 1,6)
percent$tx<-NA
percent$tx<-as.character(percent$tx)
for(i in c(1:nrow(percent))){
for(j in c(1:nrow(risk)))
if(percent$individ[i]==risk$individ[j])
percent$tx[i]<-risk$tx[j]
}
percent$species<-substr(percent$individ, 1, 6)
mod<-lm(perc.bb~tx + species, data=percent)
display(mod)
qplot(species, perc.bb, data = percent,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Percent Budburst")
bpap
mod<-lm(perc.bb~tx + species, data=percent)
display(mod)
percent<-subset(percent, species %in% betula)
betula
mod<-lm(perc.bb~tx + species, data=percent)
display(mod)
qplot(species, perc.bb, data = percent,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Percent Budburst")
mod2<-glm(dvr~bud+species+frost, data=birch)
display(mod2)
mod3<-glm(dvr~species+bud*tx, data=birch)
display(mod3)
mod1<-glm(dvr~bud+species+frost, data=risk)
display(mod1)
mod4<-lmer(dvr~bud+frost+(1|species), data=birch)
display(mod4)
mod1<-lm(dvr~bud+species+frost, data=risk)
display(mod1)
mod1<-lm(dvr~bud+species+frost, data=birch)
display(mod1)
risk$frost<-ifelse(risk$bbch.first<=risk$frz, 1, 0)
risk$frost<-ifelse(risk$tx=="A", 0, risk$frost)
mod1<-lm(dvr~bud+species+frost, data=birch)
display(mod1)
betula<-c("BETPOP", "BETPAP")
birch<-subset(risk, risk$species%in%betula)
mod1<-lm(dvr~bud+species+frost, data=birch)
display(mod1)
mod1<-lm(dvr~bud+species+tx, data=birch)
display(mod1)
birch$avg.rate<-ave(birch$dvr, birch$individ)
qplot(species, avg.rate, data = birch,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Mean DVR")
birch$avg.rate<-ave(birch$dvr, birch$individ, FUN=mean)
birch.avg<-
plyr::ddply(d, c("individ"), summarise,
avg.rate = mean(dvr))
birch.avg<-
plyr::ddply(birch, c("individ"), summarise,
avg.rate = mean(dvr))
View(birch.avg)
birch.mean<-birch[!is.na(birch$dvr),]
birch.mean$avg.rate<-ave(birch$dvr, birch$individ)
birch.mean$avg.rate<-ave(birch.mean$dvr, birch.mean$individ)
View(birch.mean)
hist(birch.mean$avg.rate)
qplot(species, avg.rate, data = birch.mean,
geom = "boxplot", color=tx) +
xlab("Species")+ylab("Mean DVR")
M1<-lmer(avg.rate~tx+(1|species), data=birch.mean)
display(M1)
M1<-lmer(avg.rate~tx+species, data=birch.mean)
M1<-lm(avg.rate~tx+species, data=birch.mean)
display(M1)
table(birch.mean$frost)
table(birch.mean$tx)
write.csv(birch, file=("~/Documents/git/freezingexperiment/analyses/output/birches_buddata.csv", row.names=FALSE)
write.csv(birch, file=("~/Documents/git/freezingexperiment/analyses/output/birches_buddata.csv"), row.names=FALSE)
View(birch)
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
# make sure this is the correct file (we're still cleaning as I write this!)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, species="BETPOP")
## make a bunch of things numeric (eek!)
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[bb(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
#ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
y = ospr.stan$resp
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(individ))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
##############################
###### real data all chilling
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
y = ospr.stan$resp
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(individ))
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
y = ospr.stan$resp
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(individ))
individ = ospr.stan$individ
n_ind = length(unique(individ))
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
# make sure this is the correct file (we're still cleaning as I write this!)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, species="BETPOP")
## make a bunch of things numeric (eek!)
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
#ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
y = ospr.stan$resp
ind = ospr.stan$individ
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
#source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
# make sure this is the correct file (we're still cleaning as I write this!)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, species="BETPOP")
## make a bunch of things numeric (eek!)
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
y = ospr.stan$resp
ind = ospr.stan$individ
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
View(ospr.stan)
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
#source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
# make sure this is the correct file (we're still cleaning as I write this!)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, species="BETPOP")
## make a bunch of things numeric (eek!)
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
bb$ind <- as.numeric(bb$individ)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "ind"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
y = ospr.stan$resp
ind = ospr.stan$ind
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
setwd("~/Documents/git/freezingexperiment/analyses/")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, species="BETPOP")
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, species="BETPOP")
View(bb)
bb<- subset(bb, species="BETPOP")
bb<- subset(bb, bb$species="BETPOP")
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, bb$species=="BETPOP")
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
bb$ind <- as.numeric(bb$individ)
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "ind"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
View(bb)
View(ospr.prepdata)
bb$ind <- as.numeric(as.character(bb$individ))
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, bb$species=="BETPOP")
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
y = ospr.stan$resp
ind = ospr.stan$individ
View(ospr.stan)
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "ind"))
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
y = ospr.stan$resp
ind = ospr.stan$individ
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
ind = as.factor(ospr.stan$individ)
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
View(ospr.stan)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, bb$species=="BETPAP")
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
y = ospr.stan$resp
ind = ospr.stan$individ
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, bb$species=="BETPOP")
## make a bunch of things numeric (eek!)
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
#ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
y = ospr.stan$resp
ind = ospr.stan$individ
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb<- subset(bb, bb$species=="BETPOP")
## make a bunch of things numeric (eek!)
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
# Fairly strict rules of inclusion in this analysis:
## remove NAs individually .... (not needed currently)
ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
y = ospr.stan$resp
ind = ospr.stan$individ
tx = ospr.stan$tx
bud = ospr.stan$bud
N = length(y)
n_ind = length(unique(ind))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(y=y,tx=tx, bud=bud,ind=ind,N=N,n_ind=n_ind)
osp.td4 = stan('scripts/Buds_individLevel.stan', data = datalist.td,
iter = 2000,warmup=1500,control=list(adapt_delta=0.99))
